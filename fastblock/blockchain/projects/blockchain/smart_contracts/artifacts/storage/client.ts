/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "store(pay,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuc3RvcmFnZS5jb250cmFjdC5TdG9yYWdlLmFwcHJvdmFsX3Byb2dyYW06CiAgICAvLyBibG9ja2NoYWluL3Byb2plY3RzL2Jsb2NrY2hhaW4vc21hcnRfY29udHJhY3RzL3N0b3JhZ2UvY29udHJhY3QucHk6NwogICAgLy8gY2xhc3MgU3RvcmFnZShBUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDUKICAgIG1ldGhvZCAic3RvcmUocGF5LHN0cmluZyl2b2lkIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9zdG9yZV9yb3V0ZUAyCiAgICBlcnIgLy8gcmVqZWN0IHRyYW5zYWN0aW9uCgptYWluX3N0b3JlX3JvdXRlQDI6CiAgICAvLyBibG9ja2NoYWluL3Byb2plY3RzL2Jsb2NrY2hhaW4vc21hcnRfY29udHJhY3RzL3N0b3JhZ2UvY29udHJhY3QucHk6MTEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBibG9ja2NoYWluL3Byb2plY3RzL2Jsb2NrY2hhaW4vc21hcnRfY29udHJhY3RzL3N0b3JhZ2UvY29udHJhY3QucHk6NwogICAgLy8gY2xhc3MgU3RvcmFnZShBUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnQgcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgLy8gYmxvY2tjaGFpbi9wcm9qZWN0cy9ibG9ja2NoYWluL3NtYXJ0X2NvbnRyYWN0cy9zdG9yYWdlL2NvbnRyYWN0LnB5OjExCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBzdG9yZQogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdANToKICAgIC8vIGJsb2NrY2hhaW4vcHJvamVjdHMvYmxvY2tjaGFpbi9zbWFydF9jb250cmFjdHMvc3RvcmFnZS9jb250cmFjdC5weTo3CiAgICAvLyBjbGFzcyBTdG9yYWdlKEFSQzRDb250cmFjdCk6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gcmVqZWN0IHRyYW5zYWN0aW9uCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGlzIGNyZWF0aW5nCiAgICBpbnQgMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzLnN0b3JhZ2UuY29udHJhY3QuU3RvcmFnZS5zdG9yZShwYXltZW50OiB1aW50NjQsIGNvZGU6IGJ5dGVzKSAtPiB2b2lkOgpzdG9yZToKICAgIC8vIGJsb2NrY2hhaW4vcHJvamVjdHMvYmxvY2tjaGFpbi9zbWFydF9jb250cmFjdHMvc3RvcmFnZS9jb250cmFjdC5weToxMS0xMgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBzdG9yZShzZWxmLCBwYXltZW50OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbiwgY29kZTogU3RyaW5nKSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyBibG9ja2NoYWluL3Byb2plY3RzL2Jsb2NrY2hhaW4vc21hcnRfY29udHJhY3RzL3N0b3JhZ2UvY29udHJhY3QucHk6MTMKICAgIC8vIG1icl9iZWZvcmUgPSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLm1pbl9iYWxhbmNlCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RNaW5CYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBmdW5kZWQKICAgIC8vIGJsb2NrY2hhaW4vcHJvamVjdHMvYmxvY2tjaGFpbi9zbWFydF9jb250cmFjdHMvc3RvcmFnZS9jb250cmFjdC5weToxNQogICAgLy8gY29udGVudF9oYXNoID0gb3Auc2hhMjU2KGNvZGUuYnl0ZXMpCiAgICBmcmFtZV9kaWcgLTEKICAgIHNoYTI1NgogICAgLy8gYmxvY2tjaGFpbi9wcm9qZWN0cy9ibG9ja2NoYWluL3NtYXJ0X2NvbnRyYWN0cy9zdG9yYWdlL2NvbnRyYWN0LnB5OjkKICAgIC8vIHNlbGYuY29udGVudCA9IEJveE1hcChIYXNoLCBTdHJpbmcpCiAgICBieXRlICJjb250ZW50IgogICAgLy8gYmxvY2tjaGFpbi9wcm9qZWN0cy9ibG9ja2NoYWluL3NtYXJ0X2NvbnRyYWN0cy9zdG9yYWdlL2NvbnRyYWN0LnB5OjktMTcKICAgIC8vICAgICBzZWxmLmNvbnRlbnQgPSBCb3hNYXAoSGFzaCwgU3RyaW5nKQogICAgLy8gCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIHN0b3JlKHNlbGYsIHBheW1lbnQ6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uLCBjb2RlOiBTdHJpbmcpIC0+IE5vbmU6CiAgICAvLyAgICAgbWJyX2JlZm9yZSA9IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MubWluX2JhbGFuY2UKICAgIC8vIAogICAgLy8gICAgIGNvbnRlbnRfaGFzaCA9IG9wLnNoYTI1Nihjb2RlLmJ5dGVzKQogICAgLy8gICAgICMgU2F2ZXMgdGhlIHVzZXIgcGF5aW5nIHR4biBmZWUgaWYgdGhlIGNvbnRlbnQgaXMgYWxyZWFkeSBzdG9yZWQKICAgIC8vICAgICBhc3NlcnQgY29udGVudF9oYXNoIG5vdCBpbiBzZWxmLmNvbnRlbnQsICJDb250ZW50IGFscmVhZHkgc3RvcmVkIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgIQogICAgLy8gYmxvY2tjaGFpbi9wcm9qZWN0cy9ibG9ja2NoYWluL3NtYXJ0X2NvbnRyYWN0cy9zdG9yYWdlL2NvbnRyYWN0LnB5OjE2LTE3CiAgICAvLyAjIFNhdmVzIHRoZSB1c2VyIHBheWluZyB0eG4gZmVlIGlmIHRoZSBjb250ZW50IGlzIGFscmVhZHkgc3RvcmVkCiAgICAvLyBhc3NlcnQgY29udGVudF9oYXNoIG5vdCBpbiBzZWxmLmNvbnRlbnQsICJDb250ZW50IGFscmVhZHkgc3RvcmVkIgogICAgYXNzZXJ0IC8vIENvbnRlbnQgYWxyZWFkeSBzdG9yZWQKICAgIC8vIGJsb2NrY2hhaW4vcHJvamVjdHMvYmxvY2tjaGFpbi9zbWFydF9jb250cmFjdHMvc3RvcmFnZS9jb250cmFjdC5weToxOAogICAgLy8gc2VsZi5jb250ZW50W2NvbnRlbnRfaGFzaF0gPSBjb2RlCiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgZnJhbWVfZGlnIC0xCiAgICBib3hfcHV0CiAgICAvLyBibG9ja2NoYWluL3Byb2plY3RzL2Jsb2NrY2hhaW4vc21hcnRfY29udHJhY3RzL3N0b3JhZ2UvY29udHJhY3QucHk6MjAKICAgIC8vIG1icl9hZnRlciA9IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MubWluX2JhbGFuY2UKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdE1pbkJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgLy8gYmxvY2tjaGFpbi9wcm9qZWN0cy9ibG9ja2NoYWluL3NtYXJ0X2NvbnRyYWN0cy9zdG9yYWdlL2NvbnRyYWN0LnB5OjIzCiAgICAvLyBwYXltZW50LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgLy8gYmxvY2tjaGFpbi9wcm9qZWN0cy9ibG9ja2NoYWluL3NtYXJ0X2NvbnRyYWN0cy9zdG9yYWdlL2NvbnRyYWN0LnB5OjIyLTI0CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIHBheW1lbnQucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gKSwgIlJlY2VpdmVyIG11c3QgYmUgdGhlIGFwcCBhZGRyZXNzIgogICAgYXNzZXJ0IC8vIFJlY2VpdmVyIG11c3QgYmUgdGhlIGFwcCBhZGRyZXNzCiAgICAvLyBibG9ja2NoYWluL3Byb2plY3RzL2Jsb2NrY2hhaW4vc21hcnRfY29udHJhY3RzL3N0b3JhZ2UvY29udHJhY3QucHk6MjYKICAgIC8vIHBheW1lbnQuYW1vdW50ID49IG1icl9hZnRlciAtIG1icl9iZWZvcmUKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgQW1vdW50CiAgICBzd2FwCiAgICB1bmNvdmVyIDIKICAgIC0KICAgID49CiAgICAvLyBibG9ja2NoYWluL3Byb2plY3RzL2Jsb2NrY2hhaW4vc21hcnRfY29udHJhY3RzL3N0b3JhZ2UvY29udHJhY3QucHk6MjUtMjcKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgcGF5bWVudC5hbW91bnQgPj0gbWJyX2FmdGVyIC0gbWJyX2JlZm9yZQogICAgLy8gKSwgIlBheW1lbnQgYW1vdW50IG11c3QgPj0gdGhlIG1pbmltdW0gYmFsYW5jZSByZXF1aXJlbWVudCBkZWx0YSIKICAgIGFzc2VydCAvLyBQYXltZW50IGFtb3VudCBtdXN0ID49IHRoZSBtaW5pbXVtIGJhbGFuY2UgcmVxdWlyZW1lbnQgZGVsdGEKICAgIHJldHN1Ygo=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuc3RvcmFnZS5jb250cmFjdC5TdG9yYWdlLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBibG9ja2NoYWluL3Byb2plY3RzL2Jsb2NrY2hhaW4vc21hcnRfY29udHJhY3RzL3N0b3JhZ2UvY29udHJhY3QucHk6NwogICAgLy8gY2xhc3MgU3RvcmFnZShBUkM0Q29udHJhY3QpOgogICAgaW50IDEKICAgIHJldHVybgo="
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "Storage",
    "methods": [
      {
        "name": "store",
        "args": [
          {
            "type": "pay",
            "name": "payment"
          },
          {
            "type": "string",
            "name": "code"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the Storage smart contract.
 */
export type Storage = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'store(pay,string)void' | 'store', {
      argsObj: {
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        code: string
      }
      argsTuple: [payment: TransactionToSign | Transaction | Promise<SendTransactionResult>, code: string]
      returns: void
    }>
}
/**
 * Defines the possible abi call signatures
 */
export type StorageSig = keyof Storage['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends StorageSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Storage smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends StorageSig> = Storage['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Storage smart contract to the method's return type
 */
export type MethodReturn<TSignature extends StorageSig> = Storage['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type StorageCreateCalls = (typeof StorageCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type StorageCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type StorageDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: StorageCreateCalls) => StorageCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class StorageCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Storage smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the store(pay,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static store(args: MethodArgs<'store(pay,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'store(pay,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payment, args.code],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Storage smart contract
 */
export class StorageClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `StorageClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Storage['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Storage smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: StorageDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(StorageCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Storage smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Storage smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the store(pay,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public store(args: MethodArgs<'store(pay,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StorageCallFactory.store(args, params))
  }

  public compose(): StorageComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      store(args: MethodArgs<'store(pay,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.store(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as StorageComposer
  }
}
export type StorageComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the store(pay,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  store(args: MethodArgs<'store(pay,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): StorageComposer<[...TReturns, MethodReturn<'store(pay,string)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the Storage smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): StorageComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): StorageComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<StorageComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<StorageComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type StorageComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type StorageComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
